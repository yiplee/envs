package main

import (
	"flag"
	"html/template"
	"log"
	"os"
	"strings"
)

var (
	pkg    string
	output string
	prefix string
)

func init() {
	flag.StringVar(&pkg, "pkg", "main", "package name")
	flag.StringVar(&prefix, "prefix", "", "prefix to filter env keys")

	defaultOutput := "./envs_gen.go"
	flag.StringVar(&output, "out", defaultOutput, "envs gen filename")
	flag.StringVar(&output, "o", defaultOutput, "envs gen filename")
}

type Env struct {
	Key   string
	Value string
}

func main() {
	flag.Parse()

	var envs []Env
	for _, item := range os.Environ() {
		if fields := strings.SplitN(item, "=", 2); len(fields) == 2 {
			key, value := fields[0], fields[1]
			if prefix == "" || strings.HasPrefix(key, prefix) {
				envs = append(envs, Env{
					Key:   key,
					Value: value,
				})
			}
		}
	}

	out, err := os.Create(output)
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	data := map[string]interface{}{
		"pkg":  pkg,
		"envs": envs,
	}

	if err := template.Must(
		template.New("_").Parse(tmpl),
	).Execute(out, data); err != nil {
		log.Fatal(err)
	}
}

const tmpl = `// Code generated by envs. DO NOT EDIT.

package {{.pkg}}

import "os"

func init() {
{{- range .envs}}
	os.Setenv("{{.Key}}","{{.Value}}")
{{- end}}
}
`
